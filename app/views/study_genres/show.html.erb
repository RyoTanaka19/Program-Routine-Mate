<div class="max-w-5xl mx-auto p-6 space-y-10">
  <!-- ジャンル名の表示 -->
  <div class="border-b pb-4">
    <h1 class="text-4xl font-bold text-gray-800">
      <%= @study_genre.name %>
    </h1>
  </div>

  <!-- Wikipedia概要の表示 -->
  <div class="bg-white shadow-md rounded-2xl p-6">
    <h2 class="text-2xl font-semibold text-gray-700 flex items-center mb-4">
      <svg class="w-6 h-6 mr-2 text-blue-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M12 6a9 9 0 11-6.363 15.363A9 9 0 0112 6z" />
      </svg>
      Wikipediaの概要
    </h2>
    <p class="text-gray-700 leading-relaxed whitespace-pre-line">
      <%= @wikipedia_summary %>
    </p>
  </div>

  <% if @study_genre.study_logs.pluck(:created_at).map(&:to_date).uniq.count >= 21 %>
    <!-- ✅ LGTM画像：投稿があるときのみ中央に表示 -->
    <div id="lgtm-container" class="flex justify-center mb-6 transition-opacity duration-1000">
      <%= image_tag 'lgtm.png', alt: 'LGTM', class: 'w-64 h-auto rounded-xl shadow-md' %>
    </div>

    <script>
      function fadeOutLgtm() {
        const lgtm = document.getElementById("lgtm-container");
        if (lgtm) {
          setTimeout(() => {
            lgtm.classList.add("opacity-0");
            setTimeout(() => {
              lgtm.remove();
            }, 1000); // 1秒で完全に非表示
          }, 5000); // 5秒後にフェードアウト開始
        }
      }

      document.addEventListener("DOMContentLoaded", fadeOutLgtm);
      document.addEventListener("turbo:load", fadeOutLgtm);
    </script>
  <% end %>

  <!-- 投稿情報の表示 -->
  <div class="bg-gray-50 shadow-inner rounded-2xl p-6">
    <h2 class="text-xl font-semibold text-gray-700 mb-4 flex items-center">
      <svg class="w-5 h-5 mr-2 text-green-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" d="M17 20h5v-2a4 4 0 00-3-3.87M9 20H4v-2a4 4 0 013-3.87M12 14v-4m0 0V6m0 4H8m4 0h4" />
      </svg>
      投稿情報
    </h2>
    
    <% if @study_genre.study_logs.any? %>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-gray-700 mb-6">
        <div class="flex items-center">
          <span class="mr-2 font-medium">投稿数：</span>
          <span><%= @study_genre.study_logs.count %> 件</span>
        </div>
      </div>

      <!-- グラフの表示 -->
      <div class="h-64 sm:h-80 md:h-96 lg:h-[400px]" id="chart-container">
        <canvas id="chart" class="w-full h-full"></canvas>
      </div>
    <% else %>
      <p class="text-gray-600">まだこのジャンルの投稿がありません。</p>
    <% end %>
  </div>

  <!-- jQueryとChart.jsのライブラリを読み込み -->
  <script>
    let chartInstance = null; // グラフインスタンスを外部で保持

    function initializeChart() {
      // AJAXリクエストを送信
      $.ajax({
        url: "<%= study_genre_path(@study_genre) %>",
        dataType: 'json',
        success: function(data) {
          const labels = Object.keys(data);
          const counts = Object.values(data);

          // グラフの描画
          const ctx = document.getElementById('chart').getContext('2d');
          
          // すでにインスタンスがあれば破棄
          if (chartInstance) {
            chartInstance.destroy();
          }

          chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
              labels: labels,
              datasets: [{
                label: '日付ごとの投稿数',
                data: counts,
                borderColor: '#4CAF50',                   // 線の色（緑）
                backgroundColor: 'rgba(76, 175, 80, 0.2)', // 線下の薄緑塗りつぶし
                fill: true,                               // 塗りつぶしを有効化
                tension: 0.3,                             // 線の滑らかさ
                pointRadius: 5,                           // データポイントの大きさ
                pointHoverRadius: 7,                      // ホバー時のポイント大きさ
                borderWidth: 3                            // 線の太さ
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                x: {
                  ticks: {
                    autoSkip: true,
                    maxRotation: 0,
                    minRotation: 0,
                  },
                  title: {
                    display: true,
                    text: '日付',
                    color: '#666'
                  },
                  grid: {
                    offset: true,
                    display: false
                  }
                },
                y: {
                  beginAtZero: true,
                  ticks: {
                    stepSize: 1
                  },
                  title: {
                    display: true,
                    text: '投稿数',
                    color: '#666'
                  }
                }
              },
              plugins: {
                legend: {
                  display: false
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      return `${context.parsed.y} 件`;
                    }
                  }
                }
              }
            }
          });
        }
      });
    }

    // ページが完全に読み込まれた後に処理を実行
    document.addEventListener("DOMContentLoaded", function() {
      initializeChart();
    });

    // Turbo対応: ページ遷移時にグラフをリフレッシュ
    document.addEventListener('turbo:load', function() {
      initializeChart();
    });

    // Turboのフレームを使って部分的な更新を検知
    document.addEventListener('turbo:frame-load', function() {
      initializeChart();
    });

    // Turboを使った遷移時でもグラフをリフレッシュ
    document.addEventListener('turbo:before-cache', function() {
      if (chartInstance) {
        chartInstance.destroy();
      }
    });
  </script>
</div>
