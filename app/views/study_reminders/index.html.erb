<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>学習セッションカレンダー</title>

  <!-- FullCalendar CSS -->
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet" />
  <!-- Tailwind CSS -->
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />

  <!-- FullCalendar JS -->
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales-all.min.js"></script>

  <style>
    #calendar {
      height: 600px;
    }
    .fc-daygrid-day {
      height: 80px;
    }
    .fc-daygrid-day-number {
      font-size: 16px;
    }
    .fc-daygrid-day-events {
      padding: 3px;
    }
    .fc-daygrid-day:hover {
      background-color: #f3f4f6;
    }
  </style>
</head>

<body class="bg-gray-100 font-sans min-h-screen">

  <header class="bg-green-300 p-4">
    <h1 class="text-3xl font-bold text-white text-center">学習カレンダー</h1>
  </header>

  <div class="max-w-7xl mx-auto px-4 py-6">
    <div id="calendar" class="bg-white rounded-lg shadow-md p-4 min-h-[600px]"></div>
  </div>

  <script>
    let calendarInstance = null;

    function initializeCalendar() {
      const calendarEl = document.getElementById('calendar');
      if (!calendarEl) return;

      if (calendarInstance) {
        calendarInstance.destroy();
      }

 calendarInstance = new FullCalendar.Calendar(calendarEl, {
  locale: 'ja',
  initialView: 'dayGridMonth',
  height: 'auto',
  events: [
    <% @study_reminders.each do |reminder| %>
      {
        start: '<%= reminder.start_time.strftime("%Y-%m-%dT%H:%M:%S") %>',
        end: '<%= reminder.end_time.present? ? reminder.end_time.strftime("%Y-%m-%dT%H:%M:%S") : reminder.start_time.strftime("%Y-%m-%dT%H:%M:%S") %>',
        title: '<%= j reminder.title.presence || "" %>',  // タイトルのみ
        extendedProps: {
          startTime: '<%= reminder.start_time.strftime("%H:%M") %>',
          endTime: '<%= reminder.end_time.present? ? reminder.end_time.strftime("%H:%M") : reminder.start_time.strftime("%H:%M") %>'
        },
        color: '#4CAF50',
        allDay: false
      },
    <% end %>
    <% @study_logs.each do |log| %>
      {
        start: '<%= log.date.strftime("%Y-%m-%d") %>',
        display: 'background',
        color: '#FB8C00',
        allDay: true
      },
    <% end %>
  ],

  eventContent: function(arg) {
    // 学習リマインダーイベントだけカスタム表示
    if (arg.event.extendedProps.startTime && arg.event.extendedProps.endTime) {
      return {
        html:
          `<div class="text-xs font-semibold text-green-900">
            ${arg.event.extendedProps.startTime} - ${arg.event.extendedProps.endTime}
          </div>
          <div class="text-sm truncate" title="${arg.event.title}">
            ${arg.event.title}
          </div>`
      }
    } else {
      // それ以外はデフォルトタイトル表示
      return { html: `<div>${arg.event.title}</div>` }
    }
  },

  eventClick: function(info) {
    alert('イベント名 学習開始時間 - 学習終了時間: ' + info.event.title);
  },

  dateClick: function(info) {
    const selectedDate = new Date(info.dateStr);
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    if (selectedDate < today) {
      alert('過去の日付には学習リマインダーを追加できません。');
      return;
    }

    const now = new Date();
    const hour = now.getHours();
    const minute = now.getMinutes();
    window.location.href = "<%= new_study_reminder_path %>?date=" + info.dateStr +
                           "&hour=" + hour + "&minute=" + minute;
  }
});


      try {
        calendarInstance.render();
      } catch (error) {
        console.error("カレンダーのレンダリングに失敗しました:", error);
      }
    }

    function setupCalendar() {
      setTimeout(initializeCalendar, 100);
    }

    document.addEventListener('DOMContentLoaded', setupCalendar);
    document.addEventListener('turbo:load', setupCalendar);
    document.addEventListener('turbo:frame-load', setupCalendar);
  </script>

</body>
</html>
