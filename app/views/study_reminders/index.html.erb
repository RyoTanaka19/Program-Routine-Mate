<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title><%= t('study_reminders.calendar_title') %></title>

  <style>
    body {
      margin: 0;
      font-family: 'Helvetica Neue', sans-serif;
      background-color: #f3f4f6; /* Tailwind gray-100 */
    }

    header {
      background-color: #22c55e; /* green-500 */
      padding: 1rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    header h1 {
      color: white;
      font-size: 1.5rem;
      text-align: center;
      font-weight: bold;
    }

    .calendar-wrapper {
      padding: 1rem 0.75rem;
    }

    #calendar {
      background-color: white;
      border-radius: 0.5rem;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
      padding: 1rem;
    }

    .fc-daygrid-day-number {
      font-size: 0.875rem;
      padding-left: 4px;
      padding-top: 2px;
    }

    .fc-daygrid-event {
      padding: 2px 6px;
      font-size: 0.75rem;
      font-weight: 600;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      border-radius: 6px;
    }

    .fc .fc-toolbar-title {
      font-size: 1rem;
    }

    .fc-button {
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
    }

    #study-reminder-modal {
      position: fixed;
      inset: 0;
      background-color: rgba(0, 0, 0, 0.55);
      z-index: 50;
      display: none;
      align-items: center;
      justify-content: center;
      padding: 1rem;
    }

    #study-reminder-modal.active {
      display: flex;
    }

    #study-reminder-modal .modal-content {
      background-color: white;
      width: 100%;
      max-width: 90%;
      border-radius: 0.75rem;
      padding: 1rem;
      position: relative;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    #study-reminder-modal button.close-btn {
      position: absolute;
      top: 0.75rem;
      right: 1rem;
      font-size: 1.5rem;
      color: #4b5563;
      background: none;
      border: none;
    }

    @media (min-width: 768px) {
      header h1 {
        font-size: 1.875rem;
      }

      .fc-daygrid-event {
        font-size: 0.9rem;
      }

      .fc .fc-toolbar-title {
        font-size: 1.25rem;
      }

      #study-reminder-modal .modal-content {
        max-width: 640px;
        padding: 1.5rem;
      }
    }
  </style>
</head>

<body>
  <header>
    <h1><%= t('study_reminders.calendar_title') %></h1>
  </header>

  <main class="calendar-wrapper">
    <div id="calendar"></div>
  </main>

  <div id="dummy"></div>

  <!-- モーダル -->
  <div id="study-reminder-modal">
    <div class="modal-content">
      <button class="close-btn" onclick="closeModal()">&times;</button>
      <%= render partial: 'form', locals: { study_reminder: StudyReminder.new } %>
    </div>
  </div>

  <script>
    const I18nMessages = {
      pastDateAlert: "<%= j t('study_reminders.alerts.past_date') %>",
      emptyTitle: "<%= j t('study_reminders.alerts.empty_title') %>",
      eventNameLabel: "<%= j t('study_reminders.alerts.event_name') %>",
      eventTimeLabel: "<%= j t('study_reminders.alerts.event_time') %>",
      renderError: "<%= j t('study_reminders.errors.render_failed') %>"
    };

    let calendarInstance = null;

    function initializeCalendar() {
      const calendarEl = document.getElementById('calendar');
      if (!calendarEl) return;

      if (calendarInstance) calendarInstance.destroy();

      calendarInstance = new FullCalendar.Calendar(calendarEl, {
        locale: '<%= I18n.locale %>',
        initialView: 'dayGridMonth',
        height: 'auto',
        events: [
          <% @study_reminders.each do |reminder| %>
            {
              start: '<%= reminder.start_time.strftime("%Y-%m-%dT%H:%M:%S") %>',
              end: '<%= reminder.end_time || reminder.start_time %>',
              title: '<%= j reminder.title.presence || "" %>',
              extendedProps: {
                startTime: '<%= reminder.start_time.strftime("%H:%M") %>',
                endTime: '<%= reminder.end_time.present? ? reminder.end_time.strftime("%H:%M") : reminder.start_time.strftime("%H:%M") %>'
              },
              color: '#4CAF50',
              allDay: false
            },
          <% end %>
          <% @study_logs.each do |log| %>
            {
              start: '<%= log.date.strftime("%Y-%m-%d") %>',
              display: 'background',
              color: '#FB8C00',
              allDay: true
            },
          <% end %>
        ],

        eventContent: function(arg) {
          if (arg.event.extendedProps.startTime && arg.event.extendedProps.endTime) {
            return {
              html: `
                <div class="text-xs font-semibold text-green-900">
                  ${arg.event.extendedProps.startTime} - ${arg.event.extendedProps.endTime}
                </div>
                <div class="text-sm truncate" title="${arg.event.title}">
                  ${arg.event.title}
                </div>`
            };
          } else {
            return { html: `<div>${arg.event.title}</div>` };
          }
        },

        eventClick: function(info) {
          const event = info.event;
          if (event.display === 'background') return;

          const title = event.title?.trim() || I18nMessages.emptyTitle;
          const startTime = event.extendedProps?.startTime || '';
          const endTime = event.extendedProps?.endTime || '';

          let message = `${I18nMessages.eventNameLabel}: ${title}`;
          if (startTime && endTime) {
            message += `\n${I18nMessages.eventTimeLabel}: ${startTime} - ${endTime}`;
          }

          alert(message);
        },

        dateClick: function(info) {
          const selectedDate = new Date(info.dateStr);
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          selectedDate.setHours(0, 0, 0, 0);

          if (selectedDate < today) {
            alert(I18nMessages.pastDateAlert);
            return;
          }

          const modal = document.getElementById('study-reminder-modal');
          modal.classList.add('active');

          const titleInput = document.getElementById('study_reminder_title');
          const startInput = document.getElementById('study_reminder_start_time');
          const endInput = document.getElementById('study_reminder_end_time');

          if (titleInput) titleInput.value = "";

          let startTimeStr, endTimeStr;

          if (selectedDate.getTime() === today.getTime()) {
            const now = new Date();
            now.setMinutes(now.getMinutes() + 1);
            const end = new Date(now.getTime() + 60 * 1000);

            const h = (d) => String(d.getHours()).padStart(2, '0');
            const m = (d) => String(d.getMinutes()).padStart(2, '0');

            startTimeStr = `${info.dateStr}T${h(now)}:${m(now)}`;
            endTimeStr = `${info.dateStr}T${h(end)}:${m(end)}`;
          } else {
            startTimeStr = `${info.dateStr}T00:00`;
            endTimeStr = `${info.dateStr}T00:01`;
          }

          if (startInput) startInput.value = startTimeStr;
          if (endInput) endInput.value = endTimeStr;
        }
      });

      try {
        calendarInstance.render();
      } catch (error) {
        console.error(I18nMessages.renderError, error);
      }
    }

    function closeModal() {
      const modal = document.getElementById('study-reminder-modal');
      modal.classList.remove('active');
    }

    function setupCalendar() {
      setTimeout(initializeCalendar, 100);
    }

    document.addEventListener('DOMContentLoaded', setupCalendar);
    document.addEventListener('turbo:load', setupCalendar);
    document.addEventListener('turbo:frame-load', setupCalendar);
  </script>
</body>
</html>
