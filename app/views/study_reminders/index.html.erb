<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title><%= t('study_reminders.calendar_title') %></title>

  <style>
    #calendar {
      height: 600px;
    }

    .fc-daygrid-day {
      height: 80px;
    }

    .fc-daygrid-day-number {
      font-size: 16px;
      font-weight: 600;
      padding-left: 6px;
      padding-top: 4px;
    }

    .fc-daygrid-day-events {
      padding: 4px 6px;
    }

    .fc-daygrid-event {
      padding: 4px 8px;
      border-radius: 8px;
      font-size: 0.9rem;
      font-weight: 600;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .fc-daygrid-day:hover {
      background-color: #f9fafb;
    }

    .calendar-wrapper {
      max-width: 900px;
      margin: 0 auto;
      padding: 1rem;
    }

    header {
      background-color: #22c55e; /* Tailwind green-500 */
      padding: 1.25rem 1rem;
      box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);
    }

    header h1 {
      color: white;
      font-weight: 700;
      font-size: 1.875rem;
      text-align: center;
      letter-spacing: 0.03em;
    }

    #study-reminder-modal {
      background-color: rgba(0, 0, 0, 0.55);
    }

    #study-reminder-modal button {
      color: #4b5563;
      transition: color 0.3s ease;
    }

    #study-reminder-modal button:hover {
      color: #111827;
    }
  </style>
</head>

<body class="bg-gray-100 font-sans min-h-screen">
  <header>
    <h1><%= t('study_reminders.calendar_title') %></h1>
  </header>

  <main class="max-w-7xl mx-auto px-4 py-6">
    <div class="calendar-wrapper">
      <div id="calendar" class="bg-white rounded-lg shadow-md p-4 min-h-[600px]"></div>
    </div>
  </main>

  <div id="dummy"></div>

  <!-- ✅ モーダル -->
  <div id="study-reminder-modal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <div class="bg-white w-full max-w-2xl rounded-xl shadow-xl p-6 relative">
      <button onclick="closeModal()" class="absolute top-3 right-4 text-gray-600 hover:text-gray-900 text-2xl">&times;</button>
      <%= render partial: 'form', locals: { study_reminder: StudyReminder.new } %>
    </div>
  </div>

  <script>
    // Railsのi18nメッセージをJavaScriptで使うために渡す
    const I18nMessages = {
      pastDateAlert: "<%= j t('study_reminders.alerts.past_date') %>",
      emptyTitle: "<%= j t('study_reminders.alerts.empty_title') %>",
      eventNameLabel: "<%= j t('study_reminders.alerts.event_name') %>",
      eventTimeLabel: "<%= j t('study_reminders.alerts.event_time') %>",
      renderError: "<%= j t('study_reminders.errors.render_failed') %>"
    };

    let calendarInstance = null;

    function initializeCalendar() {
      const calendarEl = document.getElementById('calendar');
      if (!calendarEl) return;

      if (calendarInstance) {
        calendarInstance.destroy();
      }

      calendarInstance = new FullCalendar.Calendar(calendarEl, {
        locale: '<%= I18n.locale %>',
        initialView: 'dayGridMonth',
        height: 600,
        events: [
          <% @study_reminders.each do |reminder| %>
            {
              start: '<%= reminder.start_time.strftime("%Y-%m-%dT%H:%M:%S") %>',
              end: '<%= reminder.end_time.present? ? reminder.end_time.strftime("%Y-%m-%dT%H:%M:%S") : reminder.start_time.strftime("%Y-%m-%dT%H:%M:%S") %>',
              title: '<%= j reminder.title.presence || "" %>',
              extendedProps: {
                startTime: '<%= reminder.start_time.strftime("%H:%M") %>',
                endTime: '<%= reminder.end_time.present? ? reminder.end_time.strftime("%H:%M") : reminder.start_time.strftime("%H:%M") %>'
              },
              color: '#4CAF50',
              allDay: false
            },
          <% end %>
          <% @study_logs.each do |log| %>
            {
              start: '<%= log.date.strftime("%Y-%m-%d") %>',
              display: 'background',
              color: '#FB8C00',
              allDay: true
            },
          <% end %>
        ],

        eventContent: function(arg) {
          if (arg.event.extendedProps.startTime && arg.event.extendedProps.endTime) {
            return {
              html: `
                <div class="text-xs font-semibold text-green-900">
                  ${arg.event.extendedProps.startTime} - ${arg.event.extendedProps.endTime}
                </div>
                <div class="text-sm truncate" title="${arg.event.title}">
                  ${arg.event.title}
                </div>`
            };
          } else {
            return { html: `<div>${arg.event.title}</div>` };
          }
        },

        eventClick: function(info) {
          const event = info.event;
          if (event.display === 'background') return;

          const title = event.title && event.title.trim() !== '' ? event.title : I18nMessages.emptyTitle;

          const startTime = event.extendedProps?.startTime || '';
          const endTime = event.extendedProps?.endTime || '';

          let message = `${I18nMessages.eventNameLabel}: ${title}`;
          if (startTime && endTime) {
            message += `\n${I18nMessages.eventTimeLabel}: ${startTime} - ${endTime}`;
          }

          alert(message);
        },

        dateClick: function(info) {
          const selectedDate = new Date(info.dateStr);
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          selectedDate.setHours(0, 0, 0, 0);

          if (selectedDate < today) {
            alert(I18nMessages.pastDateAlert);
            return;
          }

          const modal = document.getElementById('study-reminder-modal');
          modal.classList.remove('hidden');

          const titleInput = document.getElementById('study_reminder_title');
          const startInput = document.getElementById('study_reminder_start_time');
          const endInput = document.getElementById('study_reminder_end_time');

          if (titleInput) titleInput.value = "";

          let startTimeStr, endTimeStr;

          if (selectedDate.getTime() === today.getTime()) {
            const now = new Date();
            now.setMinutes(now.getMinutes() + 1);
            const end = new Date(now.getTime() + 60 * 1000);

            const h = (d) => String(d.getHours()).padStart(2, '0');
            const m = (d) => String(d.getMinutes()).padStart(2, '0');

            startTimeStr = `${info.dateStr}T${h(now)}:${m(now)}`;
            endTimeStr = `${info.dateStr}T${h(end)}:${m(end)}`;
          } else {
            startTimeStr = `${info.dateStr}T00:00`;
            endTimeStr = `${info.dateStr}T00:01`;
          }

          if (startInput) startInput.value = startTimeStr;
          if (endInput) endInput.value = endTimeStr;
        }
      });

      try {
        calendarInstance.render();
      } catch (error) {
        console.error(I18nMessages.renderError, error);
      }
    }

    function closeModal() {
      const modal = document.getElementById('study-reminder-modal');
      modal.classList.add('hidden');
    }

    function setupCalendar() {
      setTimeout(initializeCalendar, 100);
    }

    document.addEventListener('DOMContentLoaded', setupCalendar);
    document.addEventListener('turbo:load', setupCalendar);
    document.addEventListener('turbo:frame-load', setupCalendar);
  </script>
</body>
</html>
