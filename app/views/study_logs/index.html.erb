<% content_for(:title, t('.title')) %>
<h1>学習記録一覧</h1>
<%= render 'search_form', q: @q, url: study_logs_path %>

<br>

<div class="w-full flex lg:items-center flex-col">
  <!-- ヒートマップの表示領域 -->
  <div id="cal-heatmap" class="overflow-auto md:overflow-scroll"></div>
</div>

<script>
  // ヒートマップを初期化する関数を即時に実行
  set_heatmap(); 

  function set_heatmap() {
    let startDate = new Date();
    startDate.setMonth(startDate.getMonth() - 2);
    console.log(startDate);

    let data = <%= @contribution_graph.to_json.html_safe %>;

    data = data.map(item => ({
      date: new Date(item.date).toISOString(),
      total: item.total
    }));

    const cal = new CalHeatmap();

    cal.paint({
      itemSelector: '#cal-heatmap',
      domain: {
        type: 'month',
        gutter: 4,
        label: { 
          text: 'MMM',
          textAlign: 'start',
          position: 'top',
        },
      },
      subDomain: {
        type: 'ghDay',
        radius: 2,
        width: 11,
        height: 11,
        gutter: 4,
      },
      date: { start: startDate },
      range: 12,
      data: { 
        source: data,
        x: 'date',
        y: 'total'
      },
      type: 'json',
      scale: {
        color: {
          type: 'linear',
          range: ['#ff4d4d', '#a8e6a2', '#6abf4f', '#337d2b', '#175e17'],
          domain: [0, 0.1, 1, 2, 3],
        },
      },
    });

    // クリックイベントの登録
    cal.on('click', (event, timestamp, value) => {
      if (!timestamp) {
        console.log('クリックしたセルに日付がありません');
        return;
      }
      const clickedDate = new Date(timestamp).toISOString().slice(0, 10);
      console.log('クリックした日付:', clickedDate);
      fetchStudyLogsByDate(clickedDate);
    });
  }

  // ★ サーバーから日付の学習ログを取得しモーダル表示 ★
  function fetchStudyLogsByDate(date) {
    fetch(`/study_logs/logs_by_date?date=${date}`, {
      headers: { 'Accept': 'application/json' }
    })
    .then(response => {
      if (response.status === 401) {
        alert("ログインが必要です。ログインページに移動します。");
        window.location.href = "/users/sign_in";
        return;
      }

      if (!response.ok) throw new Error("サーバーエラー");
      return response.json();
    })
    .then(data => {
      if (data) showLogsModal(date, data);
    })
    .catch(error => {
      alert("データ取得失敗: " + error.message);
    });
  }

  // ★ モーダル表示 ★
  function showLogsModal(date, logs) {
    const modal = document.getElementById("logs-modal");
    const list = document.getElementById("logs-list");
    const title = document.getElementById("modal-title");

    title.textContent = `${date} の学習記録`;
    list.innerHTML = "";

    if (logs.length === 0) {
      list.innerHTML = "<li>この日の投稿はありません。</li>";
    } else {
      logs.forEach(log => {
        const item = document.createElement("li");
        item.innerHTML = `
          <div class="p-3 border rounded shadow-sm bg-gray-50">
            <div class="font-bold">${log.study_genre?.name || '未分類'}: ${log.content}</div>
            <div class="text-sm text-gray-600 mt-1">${log.text || ''}</div>
            <div class="text-xs text-gray-400 mt-1">投稿日: ${new Date(log.created_at).toLocaleString()}</div>
          </div>
        `;
        list.appendChild(item);
      });
    }

    modal.classList.remove("hidden");
  }

  // ★ モーダル非表示 ★
  function closeModal() {
    document.getElementById("logs-modal").classList.add("hidden");
  }
</script>


<br>


<!-- 投稿一覧セクション -->
<div class="flex flex-wrap gap-4 justify-center">
  <% @study_logs.each do |study_log| %>
    <div class="w-80 mb-4 flex flex-col border p-4 rounded-lg shadow-md bg-white hover:bg-gray-100">
      <%= link_to study_log_path(study_log), class: "block flex flex-col h-full" , data: { action: "click->loading#show" } do %>

        <!-- 投稿日時と学習時間 -->
        <div class="text-sm text-gray-600 mb-2">
          <p><strong>投稿日:</strong> <%= study_log.date %></p>
        </div>

        <!-- ジャンル -->
        <p class="text-sm text-gray-600"><strong>ジャンル:</strong> <%= study_log.study_genre.present? ? study_log.study_genre.name : "未設定" %></p>

        <!-- 学習内容 -->
        <p class="text-sm mb-2">学習内容: <%= study_log.content %></p>

        <!-- 投稿画像 -->
        <%= image_tag(study_log.image? ? study_log.image_url : "default_study_logs_image.png", class: "w-full h-auto rounded-md mb-2") %>

        <!-- いいね -->
        <div class="flex items-center gap-1 text-gray-700 text-lg mt-2">
          <span class="text-xl">👍</span>
          <span><%= study_log.likes.count %></span>
        </div>

        <!-- ログイン状態 -->
        <div class="text-xs mt-2">
          <% if user_signed_in? && current_user == study_log.user %>
            <span style="color: green;">✅ ログイン中</span>
          <% else %>
            <span style="color: red;">❌ 未ログイン</span>
          <% end %>
        </div>

        <!-- ユーザー名 (右下に表示) -->
        <div class="mt-auto text-xs text-right text-blue-600">
          <p><strong>ユーザー:</strong> <%= study_log.user.name %></p>
        </div>

      <% end %>
    </div>
  <% end %>
</div>



<%= paginate @study_logs %>

<!-- ★ モーダルのHTML ★ -->
<div id="logs-modal" class="fixed z-50 inset-0 bg-black bg-opacity-50 hidden">
  <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl mx-auto mt-20">
    <h2 class="text-lg font-semibold mb-4" id="modal-title"></h2>
    <ul id="logs-list" class="space-y-2 text-gray-700 max-h-[50vh] overflow-y-auto"></ul>
    <button onclick="closeModal()" class="mt-4 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">閉じる</button>
  </div>
</div>
