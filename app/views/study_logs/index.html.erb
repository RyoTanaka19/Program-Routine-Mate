<% content_for(:title, t('.title')) %>

<%= render 'search_form', q: @q, url: study_logs_path %>

<br>

<div class="w-full flex lg:items-center flex-col">
  <!-- ヒートマップの表示領域 -->
  <div id="cal-heatmap" class="overflow-auto md:overflow-scroll"></div>
</div>

<script>
  let cal = null; // グローバルに保持する CalHeatmap インスタンス

  // DOM 読み込み後（通常のページ + Turbo 対応）
  document.addEventListener("turbo:load", initHeatmap); // Turbo対応
  document.addEventListener("DOMContentLoaded", initHeatmap); // 通常遷移対応

  function initHeatmap() {
    // #cal-heatmap が存在しないページでは何もしない
    if (!document.getElementById("cal-heatmap")) return;

    set_heatmap();
  }

  function set_heatmap() {
    // すでに存在する場合は削除して再描画
    if (cal !== null) {
      cal.destroy();
    }

    let startDate = new Date();
    startDate.setMonth(startDate.getMonth() - 2);

    let data = <%= @contribution_graph.to_json.html_safe %>;

    data = data.map(item => ({
      date: new Date(item.date).toISOString(),
      total: item.total
    }));

    cal = new CalHeatmap();

    cal.paint({
      itemSelector: '#cal-heatmap',
      domain: {
        type: 'month',
        gutter: 4,
        label: {
          text: 'MMM',
          textAlign: 'start',
          position: 'top',
        },
      },
      subDomain: {
        type: 'ghDay',
        radius: 2,
        width: 11,
        height: 11,
        gutter: 4,
      },
      date: { start: startDate },
      range: 12,
      data: {
        source: data,
        x: 'date',
        y: 'total'
      },
      type: 'json',
      scale: {
        color: {
          type: 'linear',
          range: ['#d0f0c0', '#a8e6a2', '#6abf4f', '#337d2b', '#175e17'],
          domain: [0, 0.5, 1, 2, 4],
        },
      },
    });

    cal.on('click', (event, timestamp, value) => {
      if (!timestamp) {
        console.log('クリックしたセルに日付がありません');
        return;
      }
      const clickedDate = new Date(timestamp).toISOString().slice(0, 10);
      fetchStudyLogsByDate(clickedDate);
    });
  }

  function fetchStudyLogsByDate(date) {
    fetch(`/study_logs/logs_by_date?date=${date}`, {
      headers: { 'Accept': 'application/json' }
    })
    .then(response => {
      if (response.status === 401) {
        alert("ログインが必要です。ログインページに移動します。");
        window.location.href = "/users/sign_in";
        return;
      }

      if (!response.ok) throw new Error("サーバーエラー");
      return response.json();
    })
    .then(data => {
      if (data) showLogsModal(date, data);
    })
    .catch(error => {
      alert("データ取得失敗: " + error.message);
    });
  }

  function showLogsModal(date, logs) {
    const modal = document.getElementById("logs-modal");
    const list = document.getElementById("logs-list");
    const title = document.getElementById("modal-title");

    title.textContent = `${date} の学習記録`;
    list.innerHTML = "";

    if (logs.length === 0) {
      list.innerHTML = "<li>この日の投稿はありません。</li>";
    } else {
      logs.forEach(log => {
        const item = document.createElement("li");
        item.innerHTML = `
          <div class="p-3 border rounded shadow-sm bg-gray-50">
            <div class="font-bold">${log.study_genre?.name || '未分類'}: ${log.content}</div>
            <div class="text-sm text-gray-600 mt-1">${log.text || ''}</div>
            <div class="text-xs text-gray-400 mt-1">投稿日: ${new Date(log.created_at).toLocaleString()}</div>
          </div>
        `;
        list.appendChild(item);
      });
    }

    modal.classList.remove("hidden");
  }

  function closeModal() {
    document.getElementById("logs-modal").classList.add("hidden");
  }
</script>







<br>


<!-- 投稿一覧セクション -->
<div class="flex flex-wrap gap-3 justify-center">
  <% @study_logs.each do |study_log| %>
    <div class="w-64 h-[340px] mb-3 flex flex-col border p-2 rounded-md shadow bg-white hover:bg-gray-100">
      <%= link_to study_log_path(study_log), class: "flex flex-col h-full justify-between", data: { action: "click->loading#show" } do %>

        <!-- 中央寄せする中身全体を囲む -->
        <!-- 中央寄せする中身全体を囲む（少し下に寄せ） -->
<div class="flex-1 flex flex-col justify-end mt-1">
  <!-- 画像（サイズ拡大 + 間隔調整）-->
  <div class="mb-1 overflow-hidden rounded-md">
    <%= image_tag(
      study_log.image? ? study_log.image_url : "default_study_logs_image.png",
      class: "w-full h-32 object-cover rounded"
    ) %>
  </div>

  <!-- 学習内容 -->
  <p class="text-[12px] font-medium text-gray-800 mb-2 line-clamp-2">
    学習内容: <%= study_log.content %>
  </p>

  <!-- ジャンル -->
  <p class="text-[11px] text-gray-600 leading-tight mb-1">
    📚 <strong>ジャンル:</strong>
    <%= study_log.study_genre&.display_name || "未設定" %>
  </p>

  <!-- 投稿日 -->
  <p class="text-[11px] text-gray-600 leading-tight mb-2">
    🗓️ <strong>日:</strong> <%= study_log.date %>
  </p>

  <!-- いいね -->
  <div class="flex items-center space-x-1 text-[11px] mb-2">
    <%= render 'study_logs/like_button', study_log: study_log %>
    <%= turbo_frame_tag "like-count-#{study_log.id}" do %>
      <span class="text-gray-700"><%= study_log.likes.count %></span>
    <% end %>
  </div>

  <!-- ログイン状態 -->
  <div class="text-[10px] text-gray-500 leading-none mb-1">
    <% if user_signed_in? && current_user == study_log.user %>
      ✅ <span class="text-green-600">ログイン中</span>
    <% else %>
      ❌ <span class="text-red-500">未ログイン</span>
    <% end %>
  </div>
</div>


        <!-- ユーザー名（下部固定） -->
        <div class="flex items-center justify-end space-x-1 mt-2 text-[11px] text-blue-600">
  <%= link_to user_path(study_log.user), class: "flex items-center space-x-1" do %>
    <%= image_tag(
      study_log.user.profile_image? ? study_log.user.profile_image_url : "default_study_logs_image.png",
      class: "w-5 h-5 rounded-full object-cover border border-blue-400"
    ) %>
    <span><%= study_log.user.name %></span>
  <% end %>
</div>
      <% end %>
    </div>
  <% end %>
</div>






<div data-controller="loading">
  <!-- `a` タグをクリックしたら loading#show が呼ばれる -->
  <div data-action="click->loading#show">
    <%= paginate @study_logs %>
  </div>
</div>

<!-- ★ モーダルのHTML ★ -->
<div id="logs-modal" class="fixed z-50 inset-0 bg-black bg-opacity-50 hidden">
  <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl mx-auto mt-20">
    <h2 class="text-lg font-semibold mb-4" id="modal-title"></h2>
    <ul id="logs-list" class="space-y-2 text-gray-700 max-h-[50vh] overflow-y-auto"></ul>
    <button onclick="closeModal()" class="mt-4 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">閉じる</button>
  </div>
</div>
