class OpenAiService
  # =============================
  # クラスメソッド: fetch_suggest
  # =============================
  # 引数として受け取った質問に対して、
  # OpenAI API を用いてプログラミングに関するアドバイスを生成する
  def self.fetch_suggest(question)
    # =============================
    # OpenAI クライアントの初期化
    # =============================
    # OpenAI API へのアクセスには、環境変数 "OPENAI_API_KEY" に設定された
    # API キーを使用して認証を行います。
    client = OpenAI::Client.new(access_token: ENV["OPENAI_API_KEY"])

    # =============================
    # AIに渡すプロンプトの定義
    # =============================
    # 質問に対して明確かつ簡潔なアドバイスを生成するための指示をプロンプトとして定義します。
    # 以下の条件をAIに伝えています：
    # 1. 日本語でのアドバイス
    # 2. 300字以内で書くこと
    # 3. 箇条書き形式でポイントを整理すること
    # 4. マークダウンや記号は使用しないこと
    prompt = <<~PROMPT
      あなたはプログラミング初心者に役立つ優秀なプログラミングアシスタントです。ユーザーの質問に対して、日本語で明確かつ簡潔にプログラミングの習慣化を助けるアドバイスを提供してください。300字以内で書いてください。リストや重要なポイントを箇条書きで改行してください。各ポイントには具体例や説明を加えてください。記号やマークダウン形式（**など）は使用しないでください。

      質問: #{question}

      アドバイス:
    PROMPT

    # =============================
    # OpenAI API へのリクエスト送信
    # =============================
    # 定義したプロンプトを元に、OpenAI API にリクエストを送信します。
    # リクエストの内容には以下のパラメータが含まれます：
    # - 使用するモデル（ここでは軽量・高速な GPT-4 系モデルの一つを使用）
    # - ユーザーからの入力メッセージ（プロンプトを埋め込む）
    # - 最大トークン数（出力の文字数を制限）
    # - 温度（AIの創造性を調整）
    response = client.chat(
      parameters: {
        model: "gpt-4o-mini",  # 使用するOpenAIモデル（軽量・高速なGPT-4系モデル）
        messages: [
          { role: "system", content: "あなたはプログラミング初心者に役立つ優秀なプログラミングアシスタントです。" },  # AIの役割・キャラ設定
          { role: "user", content: prompt }  # ユーザーからの入力としてプロンプトを渡す
        ],
        max_tokens: 500,     # 最大出力トークン数（文字数の目安）
        temperature: 0.7     # 創造性のレベル（0.0で堅実、1.0でランダム性高め）
      }
    )

    # =============================
    # レスポンスの処理
    # =============================
    # OpenAIから返されたレスポンスの中から生成されたアドバイスを抽出します。
    # - "choices" 配列の中の最初の要素（インデックス0）から、AIが生成したメッセージを取得
    # - 返されたメッセージから空白を取り除いて返却します。
    response.dig("choices", 0, "message", "content").strip

  rescue StandardError => e
    # =============================
    # エラー発生時の処理
    # =============================
    # API呼び出し中にエラーが発生した場合は、以下を行います：
    # - エラーメッセージをRailsのログに記録し、デバッグ用に役立てます。
    # - ユーザーには汎用的なエラーメッセージを表示し、具体的なエラー内容は伏せます。
    Rails.logger.error("OpenAI APIエラー: #{e.message}")

    # ユーザーには「AIからアドバイスを受けられない」旨のメッセージを表示
    "現在AIからアドバイスを受けることができません。後ほどお試しください。"
  end
end
