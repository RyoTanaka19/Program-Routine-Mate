require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # In the development environment your application's code is reloaded any time
  # it changes. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable caching. By default caching is disabled.
  # Run rails dev:cache to toggle caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store
    config.public_file_server.headers = { "Cache-Control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false

    config.cache_store = :null_store
  end

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Don't care if the mailer can't send.
  # Disable caching for Action Mailer templates even if Action Controller
  # caching is enabled.
  config.action_mailer.perform_caching = false

  # Print deprecation notices to the Rails logger.

  config.active_support.deprecation = :log

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Suppress logger output for asset requests.

  config.assets.quiet = true

  config.action_mailer.raise_delivery_errors = true

  config.action_mailer.perform_deliveries = true

# デフォルトのURLオプションを設定します。
# これは、メールの中で生成されるURL（例えば、パスワードリセットリンクなど）に使用される基本のホスト名とポート番号を指定します。
config.action_mailer.default_url_options = { host: "localhost", port: 3000 }

# メール送信方法をSMTPに設定します。
# これにより、指定したSMTPサーバーを使ってメールを送信できるようになります。
config.action_mailer.delivery_method = :smtp

# SMTPサーバーの設定を指定します。
# ここでは、GmailのSMTPサーバーを使用しています。
# SMTP設定を構成し、Gmailを使用してメールを送信するための設定です。
# メール送信に必要な情報を指定しています。

config.action_mailer.smtp_settings = {
  # 使用するSMTPサーバーのアドレスを指定します。
  # Gmailの場合、"smtp.gmail.com"を指定します。
  address: "smtp.gmail.com",

  # GmailのSMTPサーバーはポート587を使用します。
  # 587はTLS（Transport Layer Security）を利用するためのポートです。
  port: 587,

  # ドメインを指定します。
  # Gmailを利用する場合は "gmail.com" を指定します。
  # これにより、送信するメールのドメインが正しく設定されます。
  domain: "gmail.com",

  # Gmailアカウントの送信者メールアドレスを指定します。
  # ここでは、環境変数 `MAILER_SENDER` から取得するようにしています。
  # 環境変数を使用することで、アプリケーションのセキュリティを保ちつつ、送信者アドレスを設定できます。
  user_name: ENV["MAILER_SENDER"],

  # 送信者のメールアカウントのパスワードを指定します。
  # ここでも、環境変数 `MAILER_PASSWORD` を使用してパスワードを管理します。
  # 環境変数で管理することで、ソースコードにパスワードをハードコーディングせず、セキュリティが向上します。
  password: ENV["MAILER_PASSWORD"],

  # SMTP認証の方式を設定します。
  # "plain"は、ユーザー名とパスワードがプレーンテキストで送信される認証方式です。
  # これは、TLS（暗号化）を使用して安全に通信するために設定されています。
  authentication: "plain",

  # STARTTLS（暗号化通信）を有効にします。
  # これにより、SMTPサーバーとの通信が暗号化され、セキュアな送信が保証されます。
  # STARTTLSを有効にすることで、通信経路を暗号化することができます。
  enable_starttls_auto: true
}



  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!
  config.assets.compile = true
  config.assets.debug = true
  config.assets.digest = false
  config.action_cable.url = "ws://localhost:3000/cable"
  config.action_cable.allowed_request_origins = [ "http://localhost:3000" ]
end
